#ставим нужные пакеты 64-bit
sudo dnf install -y --allowerasing --skip-broken --nobest inxi mangohud gcc* meson git flex bison gccmakedep lm_sensors-devel lib64elfutils-devel libllvm-devel expat libselinux-devel libatomic-devel python3-mako libdrm_amdgpu1 libdrm_intel1 libdrm_radeon1 libudev1 libglvnd lib64epoxy-devel gtk+3.0 libzstd1 libzstd-devel vulkan lib64xdamage-devel lib64xfixes-devel lib64xmu-devel lib64xxf86vm-devel lib64xv-devel lib64xvmc-devel valgrind lib64stdc++-static-devel libssl1 libclc lib64xvmc-devel lib64vdpau-drivers lib64vdpau-devel libva2 wayland-protocols-devel wayland*-devel glslang glslang-devel patchelf lib64xrandr-devel libd3dadapter9-devel lib64d3dadapter9-devel libvulkan-devel lib64vulkan-devel lib64python3-devel libxrandr-devel libxxf86vm-devel lib64xshmfence-devel libxfixes-devel lib64wayland-devel lib64elf-devel lib64drm-devel libdrm-common libdrm-common.i686 lib64drm_amdgpu1 libxcb-devel.i686 libxcb-devel libzstd-devel.i686 libzstd-devel expat-devel libxshmfence-devel libxshmfence-devel.i686 libunwind-devel libunwind-devel.i686 libomxil-bellagio-devel libomxil-bellagio-devel.i686 zlib-devel libvdpau-devel libvdpau-devel.i686 libdrm-devel libdrm-devel.i686 pkgconf pkgconf.i686 python-pkgconfig python3-pkgconfig lib64omxil-bellagio-devel lib64va-devel lib64zstd-devel lib64clang-devel

#ставим нужные пакеты 32bit
sudo dnf install --skip-broken --nobest inxi mangohud gcc* meson git flex bison gccmakedep lm_sensors-devel libelfutils-devel libllvm-devel expat libselinux-devel libatomic-devel python3-mako libdrm_amdgpu1 libdrm_intel1 libdrm_radeon1 libudev1 libglvnd libepoxy-devel gtk+3.0 libzstd1 libzstd-devel vulkan libxdamage-devel libxfixes-devel libxmu-devel libxxf86vm-devel libxv-devel libxvmc-devel valgrind libstdc++-static-devel libssl1 libclc libxvmc-devel libvdpau-drivers libvdpau-devel libva2 wayland-protocols-devel wayland*-devel glslang glslang-devel patchelf libxrandr-devel libd3dadapter9-devel libd3dadapter9-devel libvulkan-devel libvulkan-devel libpython3-devel libxrandr-devel libxxf86vm-devel libxshmfence-devel libxfixes-devel libwayland-devel libelf-devel libdrm-devel libdrm-common libdrm-common libdrm_amdgpu1 libxcb-devel libxcb-devel libzstd-devel libzstd-devel expat-devel libxshmfence-devel libxshmfence-devel libunwind-devel libunwind-devel libomxil-bellagio-devel libomxil-bellagio-devel zlib-devel libvdpau-devel libvdpau-devel libdrm-devel libdrm-devel pkgconf pkgconf python-pkgconfig python3-pkgconfig libomxil-bellagio-devel libva-devel libzstd-devel libclang-devel


#создаем системную папку для библиотек и пакетов которые мы будем собирать в mesa-devel
sudo mkdir /usr/share/mesa-devel-portable
sudo chmod -R 777 /usr/share/mesa-devel-portable

#создаем системную папку для библиотек и пакетов которые мы будем собирать в mesa-stable
sudo mkdir /usr/share/mesa-stable-portable
sudo chmod -R 777 /usr/share/mesa-stable-portable


# создаем папку для сборки mesa-git
git clone https://gitlab.freedesktop.org/mesa/mesa.git
cd mesa
# for mesa 22.2+
git checkout 22.2
#for mesa 22.3-rc1
git checkout staging/22.3

#сборка версии mesa-devel 64bit FULL
meson build64 --libdir lib64 \
       -D platforms=x11,wayland \
       -D gallium-drivers=r300,r600,radeonsi,nouveau,virgl,svga,swrast,iris,crocus,zink,d3d12 \
       -D vulkan-drivers=amd,intel,swrast,virtio-experimental \
       -D vulkan-layers=device-select,overlay \
       -D dri3=enabled \
       -D egl=enabled \
       -D gallium-extra-hud=true \
       -D gallium-nine=true \
       -D gallium-omx=bellagio \
       -D gallium-opencl=disabled \
       -D gallium-va=enabled \
       -D gallium-vdpau=enabled \
       -D gallium-xa=enabled \
       -D gbm=enabled \
       -D gles1=disabled \
       -D gles2=enabled \
       -D glvnd=true \
       -D glx=dri \
       -D llvm=enabled \
       -D lmsensors=enabled \
       -D osmesa=true \
       -D shared-glapi=enabled \
       -D microsoft-clc=disabled \
       -D valgrind=disabled \
       -D tools=[] \
       -D zstd=enabled \
       -D video-codecs=vc1dec,h264dec,h264enc,h265dec,h265enc \
       -D buildtype=release \
       -D prefix=/usr \
       -D sysconfdir=/etc \
       -D buildtype=release

ulimit -n 4096 && sudo ninja -C build64 install


A couple of notes for packagers:
- When building the Intel Vulkan driver with ray-tracing (using
  `-D intel-clc=enabled`, disabled by default), libclc is required
  (both as build and runtime dependency).
- Rusticl, the OpenCL implementation (`-D gallium-rusticl=true`,
  disabled by default), introduces a bunch of new dependencies.
  Make sure you read docs/rusticl.rst (https://docs.mesa3d.org/rusticl)
  if you-re considering enabling it.

The minimum versions to build Rusticl are:

    Rust: 1.59

    Meson: 0.61.4

    Bindgen: 0.58.0

    LLVM: 11.0.0 (recommended: 15.0.0)

    SPIRV-Tools: any version (recommended: v2022.3)

Afterwards you only need to add -Dgallium-rusticl=true -Dllvm=enabled -Drust_std=2021 to your build options.

Rusticl environment variables¶

RUSTICL_DEVICE_TYPE

    allows to overwrite the device type of devices. Possible values are accelerator, cpu, custom and gpu
RUSTICL_CL_VERSION

    overwrites the auto detected OpenCL version of all devices. Specified as major.minor.
RUSTICL_ENABLE

    a comma-separated list of drivers to enable CL on. An optional list of comma-separated integers can be passed per driver to specify which devices to enable. Examples:

        RUSTICL_ENABLE=iris (enables all iris devices)

        RUSTICL_ENABLE=iris:1,radeonsi:0,2 (enables second iris and first and third radeonsi device)





















    meson setup mesa _build \
       -D b_ndebug=true \
       -D b_lto=false \
       -D platforms=x11,wayland \
       -D gallium-drivers=r300,r600,radeonsi,nouveau,virgl,svga,swrast,iris,crocus,zink,d3d12 \
       -D vulkan-drivers=amd,intel,swrast,virtio-experimental,intel_hasvk \
       -D vulkan-layers=device-select,overlay \
       -D dri3=enabled \
       -D egl=enabled \
       -D gallium-extra-hud=true \
       -D gallium-nine=true \
       -D gallium-omx=bellagio \
       -D gallium-opencl=icd \
       -D gallium-va=enabled \
       -D gallium-vdpau=enabled \
       -D gallium-xa=enabled \
       -D gbm=enabled \
       -D gles1=disabled \
       -D gles2=enabled \
       -D glvnd=true \
       -D glx=dri \
       -D libunwind=enabled \
       -D llvm=enabled \
       -D lmsensors=enabled \
       -D osmesa=true \
       -D shared-glapi=enabled \
       -D microsoft-clc=disabled \
       -D valgrind=disabled \
       -D tools=[] \
       -D zstd=enabled \
       -D video-codecs=vc1dec,h264dec,h264enc,h265dec,h265enc \
       -D buildtype=plain \
       --wrap-mode=nofallback \
       -D prefix=/usr \
       -D sysconfdir=/etc
































flex
bison
gccmakedep
python3-libxml2
makedepend
meson
lm_sensors-devel
llvm14
lib64llvm-devel
pkgconfig(expat)
elfutils-devel
pkgconfig(libselinux)
libatomic-devel
python3-mako
pkgconfig(libdrm) >= 2.4.56
pkgconfig(libudev) >= 186
%if %{with glvnd}
pkgconfig(libglvnd)
%endif
%ifnarch %{armx} %{riscv} %{e2k}
# needed only for intel binaries
pkgconfig(epoxy)
pkgconfig(gtk+-3.0)
%endif
pkgconfig(libzstd)
pkgconfig(vulkan)
pkgconfig(x11) >= 1.3.3
pkgconfig(xdamage) >= 1.1.1
pkgconfig(xext) >= 1.1.1
pkgconfig(xfixes) >= 4.0.3
pkgconfig(xi) >= 1.3
pkgconfig(xmu) >= 1.0.3
pkgconfig(xproto)
pkgconfig(xt) >= 1.0.5
pkgconfig(xxf86vm) >= 1.1.0
pkgconfig(xshmfence) >= 1.1
pkgconfig(xrandr)
pkgconfig(xcb-dri3)
pkgconfig(xcb-present)
pkgconfig(xv)
pkgconfig(xvmc)
#pkgconfig(valgrind)
# for libsupc++.a
stdc++-static-devel
# (tpg) with openssl a steam crashes
# Program received signal SIGSEGV, Segmentation fault.
# 0xf63db8d5 in OPENSSL_ia32_cpuid () from /lib/libcrypto.so.1.0.0
# crypto is needed for shader cache which uses the SHA-1
# (tpg) strting from 2019-04-15 and openssl-1.1.1b-5 this is fixed
pkgconfig(libssl)
%if %{with opencl}
pkgconfig(libclc)
%endif
pkgconfig(xvmc)
%if %{with vdpau}
pkgconfig(vdpau) >= 0.4.1
%endif
%if %{with va}
pkgconfig(libva) >= 0.31.0
%endif
pkgconfig(wayland-egl)
pkgconfig(wayland-client)
pkgconfig(wayland-server)
pkgconfig(wayland-protocols)
pkgconfig(wayland-scanner)
glslang
patchelf
